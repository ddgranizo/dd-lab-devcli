# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  solutionTarget: 'Main/dd-lab-devcli.sln'
  testResultsPath: 'TestResults/'
  coverageFolderPath : '/TestResults/Coverage/'
  buildConfiguration: 'Release'
  coreCliVersion: 2.2.105
  runTime: 'win10-x64'

steps:

#- task: DotNetCoreCLI@2
#  displayName: 'Publishing...'
#  inputs:
#    command: 'publish'
#    publishWebProjects: false
#    projects: '**/*.csproj'
#    configuration: 'Release'
#    minorVersion: $(Build.BuildId)

- task: DotNetCoreInstaller@1
  displayName: 'Installing version $(coreCliVersion)...'
  inputs:
    version: $(coreCliVersion)


############### PUBLISH 

- script: |
    dotnet publish -c Debug -r win10-x64
  workingDirectory: "$(Agent.BuildDirectory)/Main/Source/DDCli"

- script: |
    mkdir - task: ArchiveFiles@2
  displayName: "Making output directory"

- task: ArchiveFiles@2
  displayName: 'Packing into zip...'
  inputs:
    rootFolderOrFile: '$(Build.BuildDirectory)/Main/Source/DDCli/bin/Debug/netcoreapp2.0/publish/'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Agent.BuildDirectory)/Output/$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true

#- task: PublishBuildArtifacts@1


- task: DotNetCoreCLI@2
  displayName: 'Restoring packages...'
  inputs:
    command: restore
    projects: '**/*.sln'
- task: DotNetCoreCLI@2
  displayName: 'Building...'
  inputs:
    command: build
    projects: '**/*.sln'
    configuration: $(buildConfiguration)

- task: DotNetCoreCLI@2
  displayName: 'Unit tests...'
  inputs:
    command: test
    projects: '**/*.sln'
    publishTestResults: true

- task: CmdLine@2
  inputs:
    script: |
      dotnet test $(solutionTarget) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput='$(Agent.BuildDirectory)/results' 
  displayName: 'Calculating code coverage...'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Agent.BuildDirectory)/results.cobertura.xml



