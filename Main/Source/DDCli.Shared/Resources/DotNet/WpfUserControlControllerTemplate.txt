
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace [[ViewNameSpace]]
{

    public partial class [[ClassName]]View : UserControl
    {


$i$
        public [[i.PropertyType]] [[i.PropertyName]]
        {
            get
            {
                return ([[i.PropertyType]])GetValue([[i.PropertyName]]Property);
            }
            set
            {
                SetValue([[i.PropertyName]]Property, value);
            }
        }
$$


$i$
		public static readonly DependencyProperty [[i.PropertyName]]Property =
                      DependencyProperty.Register(
                          "[[i.PropertyName]]",
                          typeof([[i.PropertyType]]),
                          typeof([[ClassName]]View), new FrameworkPropertyMetadata(new PropertyChangedCallback(OnValueChanged))
                          {
                              BindsTwoWayByDefault = true,
                          });
$$


         [[ClassName]]ViewModel _viewModel = null;

        public [[ClassName]]View()
        {
            InitializeComponent();
			this.DataContext = _viewModel;
            _viewModel.Initialize(this);
        }


        private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
			[[ClassName]]View v = d as [[ClassName]]View;
			if(false)
			{
			}
$i$
			else if (e.Property.Name == "[[i.PropertyName]]")
            {
                v.Set[[i.PropertyName]](([[i.PropertyType]])e.NewValue);
            }
$$
        }

$i$
		private void Set[[i.PropertyName]]([[i.PropertyType]] data)
        {
            _viewModel.[[i.PropertyName]] = data;
        }
$$
		
    }
}
